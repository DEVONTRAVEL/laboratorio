generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model protetico {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  servicoExecucaoEtapa servicoExecucaoEtapa[]
}

model usuario {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  nome  String
  email String @unique
  senha String
}

model servico {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  descricao String? @default("")

  etapa           etapa[]
  clinicaServico  clinicaServico[]
  servicoExecucao servicoExecucao[]
  clienteEtapa    clienteEtapa[]
}

model dentista {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  cpfCnpj   String? @default("")
  clinicaId String  @db.ObjectId

  clinica          clinica           @relation(references: [id], fields: [clinicaId])
  servicoExecutado servicoExecucao[]
}

model etapa {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  valor        Int
  servicoId    String         @db.ObjectId
  clienteEtapa clienteEtapa[]

  servico servico @relation(fields: [servicoId], references: [id])
}

model cliente {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  nome    String
  cpfCnpj String? @default("")

  clienteEtapa clienteEtapa[]
  clinica      clinica[]
}

model clinica {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  cpfCnpj   String? @default("")
  clienteId String  @db.ObjectId

  cliente        cliente          @relation(fields: [clienteId], references: [id])
  dentista       dentista[]
  clinicaServico clinicaServico[]
}

model servicoExecucao {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  servicoId        String @db.ObjectId
  dentistaId       String @db.ObjectId
  clinicaServicoId String @db.ObjectId

  clinicaServico       clinicaServico         @relation(fields: [clinicaServicoId], references: [id])
  servico              servico                @relation(fields: [servicoId], references: [id])
  dentista             dentista               @relation(fields: [dentistaId], references: [id])
  servicoExecucaoEtapa servicoExecucaoEtapa[]
}

model servicoExecucaoEtapa {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  proteticoId        String @db.ObjectId
  clienteEtapaId     String @db.ObjectId
  servicoExecutadoId String @db.ObjectId

  protetico       protetico       @relation(fields: [proteticoId], references: [id])
  clienteEtapa    clienteEtapa    @relation(fields: [clienteEtapaId], references: [id])
  servicoExecucao servicoExecucao @relation(fields: [servicoExecutadoId], references: [id])
}

model clienteEtapa {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  clienteId String @db.ObjectId
  servicoId String @db.ObjectId
  etapaId   String @db.ObjectId

  servico              servico                @relation(fields: [servicoId], references: [id])
  etapa                etapa                  @relation(fields: [etapaId], references: [id])
  cliente              cliente                @relation(fields: [clienteId], references: [id])
  servicoExecucaoEtapa servicoExecucaoEtapa[]
}

model clinicaServico {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clinicaId String   @db.ObjectId
  servicoId String   @db.ObjectId
  valor     Int
  exclusao  Boolean? @default(false)

  servico         servico           @relation(fields: [servicoId], references: [id])
  clinica         clinica           @relation(fields: [clinicaId], references: [id])
  servicoExecucao servicoExecucao[]
}
